#!/usr/bin/env python3
#
# Author: Yipeng Sun
# License: BSD 2-clause
# Last Change: Sun Jun 13, 2021 at 03:16 AM +0200

import sys
import uproot

import mplhep as hep
import matplotlib.pyplot as plt

from pyTuplingUtils.argparse import (
    single_branch_parser_no_output, DataPairAction, split_ntp_tree)

from pyTuplingUtils.io import read_branches_dict
from pyTuplingUtils.utils import gen_histo
from pyTuplingUtils.plot import plot_histo, plot_errorbar
from pyTuplingUtils.plot import ax_add_args_histo, ax_add_args_errorbar
from pyTuplingUtils.boolean.eval import BooleanEvaluator


################################
# Command line argument parser #
################################

def parse_input(descr='plot branches from ntuples.'):
    parser = single_branch_parser_no_output(descr)

    parser.add_argument('-o', '--output',
                        required=True,
                        help='specify output file.')

    parser.add_argument('-XD', '--x-data-range',
                        nargs=2,
                        action=DataPairAction,
                        default=None,
                        help='specify x-axis range.')

    parser.add_argument('-YD', '--y-data-range',
                        nargs=2,
                        action=DataPairAction,
                        default=None,
                        help='specify y-axis range.')

    parser.add_argument('-XL', '--xlabel',
                        default=None,
                        help='specify x-axis label.')

    parser.add_argument('-YL', '--ylabel',
                        default='Number of candidates',
                        help='specify y-axis label.')

    parser.add_argument('--title',
                        default=None,
                        help='specify title.')

    parser.add_argument('-l', '--labels',
                        required=True,
                        action='append',
                        nargs='+',
                        help='specify plot legend labels.')

    parser.add_argument('-c', '--colors',
                        default=None,
                        action='append',
                        nargs='+',
                        help='specify plot colors.')

    parser.add_argument('--cuts',
                        default=None,
                        action='append',
                        nargs='+',
                        help='specify optional cuts for each branch.')

    parser.add_argument('--multipliers',
                        default=None,
                        type=float,
                        action='append',
                        nargs='+',
                        help='specify optional multiplier for each branch.')

    parser.add_argument('--yscale',
                        nargs='?',
                        default='linear',
                        help='y axis scale (linear or log).')

    parser.add_argument('--normalize',
                        action='store_true',
                        help='normalize plots to 1.')

    parser.add_argument('--debug',
                        action='store_true',
                        help='enable debug mode.')

    return parser.parse_args()


########
# Main #
########

if __name__ == '__main__':
    args = parse_input()
    hep.style.use('LHCb2')

    first_plot = True
    figure = None
    axis = None

    xmin, xmax = (0, 0) if not args.x_data_range else args.x_data_range

    if not args.y_data_range:
        if args.yscale == 'linear':
            ymin = ymax = 0
        if args.yscale == 'log':
            ymin = ymax = 1
    else:
        ymin, ymax = args.y_data_range

    if not args.colors:
        good_colors = ['cornflowerblue', 'black', 'crimson', 'darkgoldenrod']
        good_colors.reverse()
        try:
            args.colors = [[good_colors.pop() for _ in br]
                           for br in args.ref_branch]
        except IndexError:
            print('No color specified and we are running out of default colors.')
            print('Please specify plot colors manually.')
            sys.exit(255)

    if not args.cuts:
        args.cuts = [[None]*len(br) for br in args.ref_branch]

    if not args.multipliers:
        args.multipliers = [[1.]*len(br) for br in args.ref_branch]

    for ntp_tree, branches, colors, labels, cuts, multipliers in zip(
            args.ref, args.ref_branch, args.colors, args.labels, args.cuts,
            args.multipliers):
        ntp_name, tree = split_ntp_tree(ntp_tree)
        ntp = uproot.open(ntp_name)
        loaded_branches_dict = read_branches_dict(ntp, tree, branches)
        loaded_branches = loaded_branches_dict.values()

        if cuts[0] is not None:
            cutter = BooleanEvaluator(ntp, tree, loaded_branches_dict)

        if args.debug:
            print('Working on: {}, tree: {}'.format(ntp_name, tree))

        for br_name, br, clr, lbl, cut, mul in zip(
                branches, loaded_branches, colors, labels, cuts, multipliers):
            if args.debug:
                print('  with branch: {}, color: {}, label: {}.'.format(
                    br_name, clr, lbl))
                print('  > apply a multiplier of: {}'.format(mul))

            br = br*mul

            if cut:
                if args.debug:
                    print('  > apply cuts: {} on: {}'.format(cut, br_name))
                br = br[cutter.eval(cut)]

            histo, bins = gen_histo(br, args.bins, data_range=args.x_data_range)
            norm = br.size if args.normalize else 1
            histo = histo / norm

            if not args.x_data_range:
                if bins[0] < xmin:
                    xmin = bins[0]
                if bins[-1] > xmax:
                    xmax = bins[-1]

            if not args.y_data_range:
                if ymax < histo.max():
                    ymax = 1.1*histo.max()

            if args.debug:
                print('  > xmin: {}, xmax: {}'.format(xmin, xmax))
                print('  > ymin: {}, ymax: {}'.format(ymin, ymax))

            if first_plot:
                first_plot = False
                histo_args = ax_add_args_histo(lbl, clr)
                figure, axis = plot_histo(
                    histo, bins, histo_args,
                    figure=figure, axis=axis,
                    xlabel=args.xlabel, ylabel=args.ylabel, title=args.title,
                    yscale=args.yscale,
                    xlim=(xmin, xmax), ylim=(ymin, ymax), show_legend=False)

            else:
                pts_args = ax_add_args_errorbar(
                    lbl, clr, marker='+', markeredgecolor=clr,
                    markeredgewidth=3)
                figure, axis = plot_errorbar(
                    bins, histo, pts_args,
                    figure=figure, axis=axis,
                    yscale=args.yscale,
                    xlim=(xmin, xmax), ylim=(ymin, ymax), show_legend=False)

    axis.legend()
    plt.tight_layout(pad=0.)
    figure.savefig(args.output)
    plt.close(figure)

    if args.debug:
        print('Plot saved to: {}'.format(args.output))
